#include "pugixml.hpp"
#include "stad.h"
#include "travelingsalesman-probprob.h"
#include "travelingsalesman.h"

#include <iostream>
#include <string>
#include <vector>

std::vector<Stad> lees_steden(const char* bestandsnaam)
{
    pugi::xml_document doc;
    pugi::xml_parse_result result = doc.load_file(bestandsnaam);

    pugi::xml_node steden = doc.child("netwerk");

    std::vector<Stad> ingelezen_steden;

    pugi::xml_node stad = steden.first_child();
    while (stad)
    {
        Stad s(stad.attribute("xcoordinaat").as_double(), stad.attribute("ycoordinaat").as_double());

        std::cout << s.to_string() << " ingelezen" << std::endl;

        ingelezen_steden.push_back(s);

        stad = stad.next_sibling();
    }

    return ingelezen_steden;
}

double bepaal_afstand_oplossing(const std::vector<Stad> oplossing)
{
    double afstand = 0;

    for (int i = 0; i < (oplossing.size() - 1); i++)
    {
        // std::cout << optimaal_pad[i].to_string() << ", ";
        afstand += oplossing[i].bereken_afstand(oplossing[i + 1]);
    }

    // std::cout << optimaal_pad[optimaal_pad.size() - 1].to_string() << std::endl;
    afstand += oplossing[0].bereken_afstand(oplossing[oplossing.size() - 1]);

    return afstand;
}

std::vector<Stad> solve_with_sa(const std::vector<Stad>& ingelezen_steden)
{
    TravelingSalesman ts{ingelezen_steden};

    return ts.oplossing();
}

std::vector<Stad> solve_with_pp(const std::vector<Stad>& ingelezen_steden)
{
    TravelingSalesmanProbProb ts{ingelezen_steden};

    return ts.geefOptimum(10'000);
}

int main()
{
    std::vector<Stad> ingelezen_steden = lees_steden("kerstnet.xml");

    std::cout << "TSP probleem oplossen ..." << std::endl;
    // std::vector<Stad> optimaal_pad = solve_with_sa(ingelezen_steden);
    std::vector<Stad> optimaal_pad = solve_with_pp(ingelezen_steden);
    std::cout << "Opgelost" << std::endl;

    double afstand = bepaal_afstand_oplossing(optimaal_pad);
    std::cout << "Minimum afstand van optimaal pad: " << afstand << std::endl;

    std::cout << "Done..." << std::endl;

    return 0;
}

/*

Er zijn 179! bruteforce mogelijkheden, dat is teveel rekenwerk
179! ==
1116089236106301664760840760547037993986335226660376544113529639778027005296644338562111878400540609642397745005763331164839067401035174973742275547399815172071920297548998924861468632538100874694671162275335324796220248138283968091277876800787759743434401881346126074043437399922442240000000000000000000000000000000000000000000

Gevonden optimaal pad
(34.335, 15.948), (33.26, 17.898), (34.795, 21.222), (36.98, 19.314), (38.18, 21.372), (36.785, 21.768),
(35.605, 27.162), (34.655, 26.244), (31.985, 23.22), (28.12, 22.254), (21.55, 26.424), (21.28, 28.806),
(20.575, 31.662), (17.7, 31.884), (18.785, 35.982), (17.585, 38.244), (18.94, 39.342), (20.02, 37.038),
(24.195, 34.794), (30.595, 34.878), (35.965, 37.188), (37.185, 39.408), (38.735, 39.894), (38.04, 43.488),
(39.665, 44.85), (40.065, 48.54), (38.215, 50.514), (37.955, 52.956), (40.995, 50.346), (44.845, 52.638),
(46.015, 51.792), (48.86, 44.094), (49.525, 49.164), (49.175, 51.234), (48.04, 53.1), (48.86, 55.146), (44.5, 56.31),
(41.605, 58.56), (39.15, 55.638), (35.5, 52.23), (34.77, 49.956), (33.485, 51.204), (31.48, 49.818), (30.65, 48.696),
(31.295, 45.078), (28.3, 44.562), (26.355, 45.786), (21.855, 50.742), (16.035, 47.832), (15.35, 46.482),
(13.355, 49.662), (15.275, 49.92), (15.035, 52.95), (17.22, 51.234), (20.64, 51.996), (23.76, 54.018), (28.125, 51.798),
(28.105, 49.548), (30.73, 51.798), (33.33, 56.688), (28.27, 59.718), (26.955, 59.628), (19.705, 57.216),
(18.385, 56.31), (18.19, 58.368), (16.59, 58.902), (13.495, 53.676), (12.055, 54.9), (5.79, 58.182), (5.14, 53.916),
(2.075, 49.536), (0.69, 49.044), (0.775, 44.142), (4.22, 43.944), (5.39, 40.992), (4.36, 37.344), (1.73, 38.064),
(0.515, 39.81), (0.82, 35.736), (0.635, 33.924), (1.905, 31.668), (4.925, 33.528), (5.055, 28.236), (6.86, 31.374),
(9.835, 33.018), (12.76, 35.934), (15.195, 36.42), (16.38, 34.008), (16.12, 32.532), (17.135, 29.688), (16.755, 27.234),
(18.21, 20.502), (19.185, 18.81), (20.38, 16.818), (18.49, 15.678), (15.775, 14.04), (14.445, 14.886), (12.02, 17.514),
(7.76, 14.496), (4.64, 10.446), (2.135, 9.81), (1.025, 6.336), (0.395, 3.03), (2.055, 1.68), (9.18, 4.374),
(14.82, 2.64), (25.06, 10.602), (24.99, 13.296), (27.115, 12.78), (27.29, 5.034), (30.985, 4.554), (30.435, 2.064),
(36.35, 1.5), (38.325, 4.464), (40.845, 3.24), (42.455, 2.22), (43.805, 1.452), (45.145, 3.126), (43.895, 4.308),
(43.975, 6.012), (49.965, 3.972), (46.96, 7.83), (49.385, 12.96), (44.73, 8.85), (43.105, 8.55), (37.745, 11.382),
(36.49, 9.726), (35.615, 11.256), (34.13, 12.102), (28.855, 17.052), (18.585, 13.734), (14.195, 8.316), (12.59, 8.844),
(8.83, 7.632), (6.74, 8.412), (5.33, 7.8), (4.42, 15.582), (2.265, 17.226), (0.05, 16.338), (0.45, 20.112),
(3.015, 19.338), (4.52, 23.292), (7.05, 23.286), (7.16, 21.474), (6.88, 19.59), (8.585, 21.618), (10.66, 20.52),
(13.04, 24.906), (12.055, 27.45), (12.84, 31.848), (13.39, 33.174), (12.695, 41.898), (10.015, 41.718), (6.32, 41.898),
(6.585, 47.82), (10.91, 49.794), (12.395, 44.844), (14.09, 42.222), (25.245, 44.862), (30.99, 40.044), (33.34, 38.274),
(40.49, 37.374), (42.01, 39.012), (43.905, 36.114), (45.725, 36.186), (45.265, 34.644), (44.535, 33.108),
(49.365, 34.164), (49.68, 30.594), (47.57, 31.152), (45.65, 30.588), (45.1, 27.39), (43.705, 26.58), (45.005, 25.872),
(47.09, 21.246), (45.83, 18.108), (44.46, 16.728), (42.005, 16.854), (41.655, 15.384), (39.295, 14.592) Minimum afstand
van optimaal pad: 655.793
*/
